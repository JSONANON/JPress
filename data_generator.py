import faker
import pandas as pd
import random as r
import numpy as np
import json
import os

f = faker.Faker()

# These 20 job titles have been generated by the faker library
titles = ['Commissioning editor', 'Midwife', 'Trader', 'Medical lab scientist',
          'Risk manager', 'Artist', 'Nurse, learning disability', 'Programmer, systems',
          'Fashion designer', 'Podiatrist', 'Clothing/textile technologist', 'Accountant, chartered',
          'Surveyor', 'Teacher', 'Diagnostic radiographer', 'Copywriter',
          'Engineer, electronics', 'Commercial art gallery manager', 'Customer service manager',
          'Information systems manager']
banks =  ['JPMorgan Chase', 'Bank of America', 'Wells Fargo', 'Citigroup', 'U.S. Bancorp', 'Truist Bank', 'PNC',
          'TD Group US Holdings LLC', 'Bank of New York Mellon', 'Capital One', 'State Street Corp.', 'Key Bank',
          'HSBC', 'Discover Bank', 'Santander']
bank_weights = [np.e**(-x/10) for x in range(1,len(banks)+1)]

path = r'./US Addresses/'

states={}

folder_names = list(filter(lambda x: x[0]!='.', os.listdir(path)))

for state in folder_names:
    states[state] = pd.read_csv(path+state+'/sample.csv', header=None, index_col=None, dtype={0:str, 1:str, 2:str})

state_names, weights=zip(*[(k,states[k].shape[0]) for k in states.keys()])

# 30% of the documents represent students, 10% represent professors, and the rest are for other jobs.
def gen_doc():
    choice = r.randint(0, 100)
    if choice < 30:
        return gen_student()
    if choice < 40:
        return gen_prof()
    return gen_employee()

def gen_prof():
    doc = gen_name()
    doc["position"]="professor"
    doc["contact"] =gen_contact(type_=0)
    doc["level"]   =r.choices(["full", "assistant", "associate"], weights=[3,2,5], k=1)[0]
    return doc
def gen_student():
    doc = gen_name()
    doc["position"]="student"
    doc["level"]   =r.choices(["undergrad", "grad"], weights=[8,2],k=1)[0]
    doc["contact"]=gen_contact(type_=r.choices([0,1,2],weights=[1,8,1],k=1)[0])
    return doc
def gen_employee():
    doc = gen_name()
    doc["position"]=r.choices(titles,k=1)[0]
    doc["contact"] =gen_contact(type_=r.choices([1,2], weights=[3,7], k=1)[0])
    doc["salary_info"]=gen_financials(type_=r.choices([0,1], weights=[9, 1], k=1)[0])
    return doc
def gen_contact(type_=0):
    if type_==0:
        return {"email":f.email(),"address":gen_address(w=weights)}
    if type_==1:
        return {"email":f.email(), "address":gen_address(w=weights), "website":f.url()}
    if type_==2:
        return {"email":f.email(), "number":f.phone_number(), "address":gen_address(w=[0,0,2,1,0,10])}
def gen_address(w):
    return states[r.choices(state_names, w)[0]].sample().to_numpy().tolist()[0][2]
def gen_financials(type_=0):
    banks_sample = r.choices(banks, weights=bank_weights, k=2)
    p = r.randint(1,99)
    dd = {"bank1":banks_sample[0], "bank2":banks_sample[1], "percentage":[p, 100-p]}
    if type_==0:
        return {"direct_deposit": dd, 'wage':int(np.random.standard_normal(1).tolist()[0]*3 + 18),
                'pay_frequency': r.choices(['monthly', 'weekly', 'biweekly'], weights=[1, 3, 6])[0]}
    return {"direct_deposit":dd, 'wage': None, 'pay_frequency': r.choices(['monthly', 'weekly', 'biweekly'],
                                                                          weights=[8, 1, 1])[0]}

def gen_name():
    name = f.name().split()
    return {"name": name[0], "lastname": name[1]}

#docs = [gen_doc() for i in range(20000)]

with open('People.json', 'w') as f_:
    for i in range(200000):
        doc = gen_doc()
        f_.write(json.dumps(doc)+'\n')
